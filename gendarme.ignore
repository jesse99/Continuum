# Ignore lists start with a rule name (R) followed by a list of assemblies (A),
# types (T), and methods (M) to ignore.

# We don't care about VB.NET consumer.
R: Gendarme.Rules.Design.Linq.AvoidExtensionMethodOnSystemObjectRule
M: System.String CsRefactor.Script.ObjectExtensions::Stringify(System.Object)
M: System.String CsRefactor.Script.ObjectExtensions::QuotedStringify(System.Object)
M: System.String Debugger.ObjectExtensions::Stringify(System.Object)

# These are OK.
R: Gendarme.Rules.Correctness.AvoidMethodsWithSideEffectsInConditionalCodeRule
M: Mono.Debugger.Soft.TypeMirror Debugger.ThreadMirrorExtensions::GetType(Mono.Debugger.Soft.ThreadMirror,System.String)
M: Mono.Debugger.Soft.TypeMirror Debugger.ThreadMirrorExtensions::GetType(Mono.Debugger.Soft.ThreadMirror,System.String)
M: System.Void TextEditor.Editor::Reload()
M: System.Void TextEditor.Editor::Reload()

R: Gendarme.Rules.Design.EnumsShouldUseInt32Rule
A: shared

R: Gendarme.Rules.Design.Generic.AvoidDeclaringCustomDelegatesRule
T: Shared.Database/UpdateCallback
T: Shared.Database/HeaderCallback
T: Shared.Database/RowCallback
T: Shared.Database/SelectCallback

R: Gendarme.Rules.Correctness.UseValueInPropertySetterRule
M: System.Void Transcript.Transcript::set_Window(MCocoa.NSWindow)

R: Gendarme.Rules.Correctness.ProvideCorrectArgumentsToFormattingMethodsRule
M: System.Void DefaultBuilder.MonoMacBuilder::DoCreatePlist(System.String)

R: Gendarme.Rules.Concurrency.ReviewLockUsedOnlyForOperationsOnVariablesRule
M: Debugger.State Debugger.DebuggerThread::GetState()

R: Gendarme.Rules.Design.PreferEventsOverMethodsRule
M: System.Void Shared.LiveRange::Fire()

R: Gendarme.Rules.Naming.AvoidRedundancyInMethodNameRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript

R: Gendarme.Rules.Design.Generic.DoNotExposeGenericListsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Exceptions.DoNotSwallowErrorsCatchingNonSpecificExceptionsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: git
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript

R: Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: default-builder
A: directory-editor
A: disassembler
A: file-system
A: find
A: git
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript
A: waf-builder

R: Gendarme.Rules.Performance.AvoidUncalledPrivateCodeRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript
A: waf-builder

R: Gendarme.Rules.Portability.DoNotHardcodePathsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: default-builder
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript

R: Gendarme.Rules.Interoperability.MarshalStringsInPInvokeDeclarationsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Naming.AvoidNonAlphanumericIdentifierRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Design.AvoidPropertiesWithoutGetAccessorRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Design.AvoidRefAndOutParametersRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Performance.AvoidReturningArraysOnPropertiesRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: default-builder
A: directory-editor
A: disassembler
A: file-system
A: find
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript
A: waf-builder

R: Gendarme.Rules.Performance.AvoidUnusedParametersRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Design.ProvideAlternativeNamesForOperatorOverloadsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Naming.UsePreferredTermsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.BadPractice.PreferEmptyInstanceOverNullRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript

R: Gendarme.Rules.Portability.NewLineLiteralRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: default-builder
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Correctness.MethodCanBeMadeStaticRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: default-builder
A: directory-editor
A: disassembler
A: file-system
A: find
A: git
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript

R: Gendarme.Rules.BadPractice.DisableDebuggingCodeRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Design.ConsiderConvertingMethodToPropertyRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Naming.UseCorrectCasingRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript
A: waf-builder

R: Gendarme.Rules.Design.AvoidSmallNamespaceRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Naming.AvoidRedundancyInTypeNameRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: git
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

R: Gendarme.Rules.Naming.UseCorrectSuffixRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# This is only done in debug code.
R: Gendarme.Rules.BadPractice.AvoidCallingProblematicMethodsRule
M: System.Void App.AppDelegate::dumpActiveObjects(MObjc.NSObject)
M: System.Void App.AppDelegate::dumpObjectDetails(MObjc.NSObject)

# These are created via reflection.
R: Gendarme.Rules.Performance.AvoidUninstantiatedInternalClassesRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# This rule is lame.
R: Gendarme.Rules.Design.AvoidVisibleNestedTypesRule
A: shared

# We want to use strings here.
R: Gendarme.Rules.Performance.PreferCharOverloadRule
M: System.String CsRefactor.RefactorScript::DoExpandText(System.String)
M: System.String[] Shared.Glob::Split(System.String)

# This rule is for VB compatibility I think.
R: Gendarme.Rules.Naming.ParameterNamesShouldMatchOverriddenMethodRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# These exceptions aren't constructed with strings.
R: Gendarme.Rules.Exceptions.MissingExceptionConstructorsRule
T: CsParser.CsParserException
T: CsRefactor.Script.EvaluateException
T: CsRefactor.Script.ReturnException
T: CsRefactor.Script.ParserException
T: CsRefactor.Script.ScannerException
T: Shared.ScriptException
T: Shared.BaseParserException
T: Shared.ParserException
T: Debugger.ParserException

# These rules are (almost always) lame.
R: Gendarme.Rules.Performance.ConsiderCustomAccessorsForNonVisibleEventsRule
A: text-editor

R: Gendarme.Rules.Design.FlagsShouldNotDefineAZeroValueRule
A: cs-refactor
A: debugger

R: Gendarme.Rules.Maintainability.AvoidComplexMethodsRule
A: auto-complete
A: cs-parser
A: cs-refactor
A: debugger
A: object-model
A: shared

R: Gendarme.Rules.Performance.AvoidMethodWithLargeMaximumStackSize
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# This rule would be a lot nicer if it didn't fire for private methods.
R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
A: app
A: auto-complete
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: cs-parser
A: nant-builder
A: object-model
A: shared
A: styler
A: text-editor
A: text-view
A: waf-builder

R: Gendarme.Rules.Naming.AvoidTypeInterfaceInconsistencyRule
T: Shared.ISccs
T: Shared.IDatabase

R: Gendarme.Rules.Concurrency.DoNotUseLockedRegionOutsideMethodRule
M: System.Void Shared.AssemblyCache::ReleaseLock()
M: System.Void Shared.AssemblyCache::AcquireLock()

# These are OK because the method is sealed. TODO: remove once gendarme is fixed.
R: Gendarme.Rules.BadPractice.ConstructorShouldNotCallVirtualMethodsRule
M: System.Void Shared.CsNamespace::SetDeclarations(System.Collections.Generic.List`1<Shared.CsDeclaration>)
M: System.Void Shared.CsType::SetDeclarations(System.Collections.Generic.List`1<Shared.CsDeclaration>)
T: Shared.CsNamespace
T: Shared.CsType

# These cares are a bit smelly but should be OK.
R: Gendarme.Rules.BadPractice.ConstructorShouldNotCallVirtualMethodsRule
T: CsRefactor.Script.RefactorType
T: CsRefactor.Namespace
T: CsRefactor.TypeDeclaration

# We don't care when these resources are cleaned up.
R: Gendarme.Rules.Design.TypesWithDisposableFieldsShouldBeDisposableRule
T: App.BaseScripts
T: CsRefactor.Script.ScriptType
T: DirectoryEditor.DirectoryController
T: DirectoryEditor.GenericBuilder
T: ObjectModel.Objects
T: ObjectModel.ParseAssembly
T: ObjectModel.Populate
T: ObjectModel.ShortForm
T: TextEditor.Styler
T: TextEditor.TextController
T: TextEditor.TextEditorView
T: Transcript.Transcript

# Complains about generic names like A1.
R: Gendarme.Rules.Naming.UseCorrectPrefixRule
A: cs-parser
A: cs-refactor
A: default-builder
A: shared
A: styler
T: Styler.CSharpDeclarations

R: Gendarme.Rules.Performance.AvoidRepetitiveCastsRule
M: System.Object CsRefactor.Script.ScriptType::DoAsk(CsRefactor.Script.Script,System.String,System.Object)
A: auto-complete
A: debugger
AL default-builder
A: object-model
A: shared
A: styler

R: Gendarme.Rules.Naming.DoNotPrefixValuesWithEnumNameRule
T: Shared.Database/Error

# These are private types so we don't care about the convenience methods like
# == or <.
R: Gendarme.Rules.Design.ImplementIComparableCorrectlyRule
T: TextEditor.TextEditorView/Entry

# Safe handle seems over kill here.
R: Gendarme.Rules.BadPractice.PreferSafeHandleRule
T: Shared.DirectoryWatcher
T: Shared.Database

# It's only 20 bytes.
R: Gendarme.Rules.Performance.AvoidLargeStructureRule
T: CsRefactor.Token

# False positive
R: Gendarme.Rules.Correctness.EnsureLocalDisposalRule
M: System.Collections.Generic.List`1<System.String> TextEditor.UnicodeName::DoGetNames()

R: Gendarme.Rules.Correctness.EnsureLocalDisposalRule
M: System.Void ObjectModel.Populate::DoOnOpenDir(System.String,System.Object)

# These should be safe.
R: Gendarme.Rules.Concurrency.DecorateThreadsRule
M: MCocoa.NSFileHandle Find.FindAll::OnOpenFile(System.String)
M: MCocoa.NSFileHandle Find.ReplaceAll::OnOpenFile(System.String)
M: Gear.Boss Shared.InterfaceExtensions::SafeBoss(Gear.IInterface)
M: System.Void Debugger.DebuggerThread::AddBreakpoint(Debugger.Breakpoint,Mono.Debugger.Soft.MethodMirror,System.Int64)
M: Debugger.DebuggerThread/HandlerAction Debugger.DebuggerThread::DoVMStartEvent(Mono.Debugger.Soft.VMStartEvent)
M: System.Void Debugger.DebuggerThread::DoDispatchEvents()
M: MCocoa.NSColor DirectoryEditor.DirectoryItemStyler::GetFileColor(System.String,System.String[][],MCocoa.NSColor[])
M: MCocoa.NSColor DirectoryEditor.DirectoryItemStyler::GetFileColor(System.String,System.String[][],MCocoa.NSColor[])
M: System.Void Styler.Language::DoWriteError(System.String,System.Object[])
M: System.Void TextView.TimeMachine::DoFindBackups(System.String)
M: System.Void App.BrowseLocalFilesController/LocalFile::.ctor(App.BrowseLocalFilesController/ThreadedFile)
M: System.Void App.BrowseLocalFilesController/LocalFile::.ctor(App.BrowseLocalFilesController/LocalFile,System.String)
M: System.Void Debugger.DebuggerDocument::OnDealloc()

# Properties are supposed to be fast so this rule seems rather silly.
R: Gendarme.Rules.Performance.AvoidRepetitiveCallsToPropertiesRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: git
A: make-builder
A: nant-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript
A: waf-builder

# This rule fires a lot and would hardly ever matter.
R: Gendarme.Rules.Performance.AvoidConcatenatingCharsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: disassembler
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# It would be nice to rewrite at least some of these methods, but that is too much
# work for very little payoff.
R: Gendarme.Rules.Performance.AvoidMethodWithLargeMaximumStackSizeRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: text-view
A: transcript

# Usually better to allow the caller to handle errors.
R: Gendarme.Rules.BadPractice.PreferTryParseRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: disassembler
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript
A: waf-builder

# We don't care about security for p/invokes.
R: Gendarme.Rules.Interoperability.CentralizePInvokesIntoNativeMethodsTypeRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# Compiler already warns about obsolete.
R: Gendarme.Rules.Maintainability.RemoveDependenceOnObsoleteCodeRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# This is a bit slower but it is also safer than using const.
R: Gendarme.Rules.BadPractice.AvoidVisibleConstantFieldRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript

# See AvoidVisibleConstantFieldRule.
R: Gendarme.Rules.Performance.PreferLiteralOverInitOnlyFieldsRule
A: app
A: auto-complete
A: build-errors
A: continuum
A: cs-parser
A: cs-refactor
A: debugger
A: directory-editor
A: file-system
A: find
A: make-builder
A: object-model
A: shared
A: svn
A: styler
A: text-editor
A: transcript
