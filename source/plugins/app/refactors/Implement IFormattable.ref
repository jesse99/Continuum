# Adds ToString(), ToString(string), ToString(string, IFormatProvider) and the
# IFormattable base.
define Run()
	if Scope is TypeDeclaration then
		Process(Scope)
	
	elif Scope is Method then
		Process(Scope.DeclaringType)
	
	else
		Raise("Selection is not within a type or method.")
	end
end

define Process(type)
	Globals.AddUsing("System")
	type.AddBase("IFormattable")
	
	if not type.HasMember("ToString", []) then
		type.AddMember(
"public override string ToString•()
{
	return ToString•(""G"", null);
}")
	end
	
	type.AddMember(
"public string ToString•(string format)
{
	return ToString•(format, null);
}")
	
	type.AddMember(
"public string ToString•(string format, IFormatProvider provider)
{
	if (provider != null)•{
		ICustomFormatter formatter = provider.GetFormat•(GetType•()) as ICustomFormatter;
		if (formatter != null)
			return formatter.Format•(format, this, provider);
	}
	
	switch (format)•{
		// This should return the object in the general (or default)
		// format. Other common standard format specifiers include
		// r for round trip and f for full.
		case """":
		case null:
		case ""g"":
		case ""G"":
			var elements = new string[]•{
			#{GetEqualProps(type)}
			#{GetEqualFields(type)}
			};
			return string.Join•("", "", elements);
		
		default:
			string message = string.Format•(""{0} isn't a valid {1} format string"", format, GetType•());
			throw new FormatException•(message);
	}
}")
end

define GetEqualProps(type)
	let props = (from prop in type.Properties
	where not prop.IsStatic and prop.HasGetter and prop.GetterBody == null # null body means it is an auto-property
	select "	string.Format•(""#{prop.Name} = {0}"", #{prop.Name}),"
	) in
		return "
			".Join(props)
	end
end

define GetEqualFields(type)
	let fields = (from field in type.Fields
	where not field.IsStatic and not field.IsConst
	select "	string.Format•(""#{field.Name} = {0}"", #{field.Name}),"
	) in
		return "
			".Join(fields)
	end
end
