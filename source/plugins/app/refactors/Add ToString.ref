# Adds ToString().
define Run()
	if Scope is TypeDeclaration then
		Process(Scope)
	
	elif Scope is Method then
		Process(Scope.DeclaringType)
	
	else
		Raise("Selection is not within a type or method.")
	end
end

define Process(type)
	Globals.AddUsing("System")
	
	if not type.HasMember("ToString", []) then
		type.AddMember(
"public override string ToString•()
{
	var elements = new string[]•{
	#{GetEqualProps(type)}
	#{GetEqualFields(type)}
	};
	return string.Join•("", "", elements);
}")
	end
end

define GetEqualProps(type)
	let props = (from prop in type.Properties
	where not prop.IsStatic and prop.HasGetter and prop.GetterBody == null # null body means it is an auto-property
	select "	string.Format•(""#{prop.Name} = {0}"", #{prop.Name}),"
	) in
		return "
	".Join(props)
	end
end

define GetEqualFields(type)
	let fields = (from field in type.Fields
	where not field.IsStatic and not field.IsConst
	select "	string.Format•(""#{field.Name} = {0}"", #{field.Name}),"
	) in
		return "
	".Join(fields)
	end
end
