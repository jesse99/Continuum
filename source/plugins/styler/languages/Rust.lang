Language: rust
Globs: *.rs *.rc
LineComment: //

Comment: // .* $
Comment: /\* (?: . | \r | \n)*? \*/
Keyword: \b(?: bind | in | (?: (?<= \w \s* : \s*) send) | with | alt | assert | as | be | break | check | claim | class | const | cont | copy | crust | do | else | enum | export | fail | false | fn | for | iface | if | impl | import | let | log | loop | mod | mut | native | pure | resource | ret | true | type | (?: (?<! :) unsafe (?! :)) | use | while)\b
Keyword2: \b(?: either | option | some | none | char | str | bool | u8 | u16 | u32 | u64 | i8 | i16 | i32 | i64 | binary32 | binary64 | f32 | f64 | uint | int | float)\b
String: r? " (?: [^"\\] | \\.)* "
String: r? ' (?: [^'\r\n\\] | \\.)* '
Number: (?<= \W) 0b [01_]+ (?: [ui] \d*)? (?= \W)
Number: (?<= \W) 0x [0-9A-Fa-f_]+ (?: [ui] \d*)? (?= \W)
Number: (?<= \W) [\d_]+ (?: [ui] \d*)? (?= \W)
Number: (?<= \W) [eE] [+-]? [\d_]+ (?: f \d+)? (?= \W)
Number: (?<= \W) . [\d_]+ (?: [eE] [+-]? [\d_]+)? (?: f \d+)? (?= \W)
Attribute: (?<= ^ \s* \x23 \s* \[) \w+
Argument: \b(?: (?<! let \s+) [&+]? \w+ : (?! :))
Type: (?<= enum \s+) \w+
Type: (?<= resource \s+) \w+
Type: (?<= iface \s+) \w+
Type: (?<= impl \s+) \w+
Type: (?<= mod \s+) \w+
Type: (?<= type \s+) \w+
Member: (?<= ^ \s* (?: pure \s+)? fn \s+) [\w_]+ (?= \(|<)



