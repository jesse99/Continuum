Continuum is a light-weight integrated development environment (IDE) targeted at
Mono and C# development. However it can be used to build non-Mono projects and
will work with languages other than C# (although usually not quite as well).

Unlike most IDEs Continuum does not have anything like a solution or project file.
Instead you open directories in Continuum and it looks for Makefile or (eventually)
Nant files which it uses to build. If it is able to find one of these files the directory
window will have a pull-down menu listing the available targets and a build button.
When a directory is first opened all of the assemblies within it (and those they reference)
will be processed in a thread and the types defined in them will become available
to auto-complete.

For the most part the interface should be obvious. One exception is that context
menus are available for items in directory and text windows. The directory context
menus will change depending on whether or not the item is part of an svn repository
and whether or not it has been modified. The text context menus will also change
depending on svn and on whether there is a selection and if the selection is a type
or method name.

Auto-complete is currently initiated by typing a '.' or quickly pressing tab twice when
the insertion point is just after an identifier. A period will complete namespaces or
members. A double tab will complete constructors when used in a new expression
or locals, arguments, and members otherwise. The auto-complete window has a
context menu which allows you to filter out items using criteria such as whether
it is an extension method or belongs to a class or interface. Note that the argument
completion window which pops up after auto-completion also has a context menu
which allows you to close the window or select a different overload.

Also you can define new scripts to operate on selections within text windows using
shell, or python, or ruby or whatever. There's a script README with more info that
you can find using the Open Scripts item in the Text menu.

And you can define new refactors for C# using a custom little language (or a new
plugin). There's a README for script refactors which you can find using the 
Open Refactors item in the Refactor menu.

Note that the type and method databases generated by Continuum can get quite
large because they transitively include all assemblies referenced by assemblies in
the directory you have open. These databases are saved in "~/Library/Caches/Continuum".

Continuum also makes fairly heavy use of the Unix locate command to search for
files. On Snow Leopard locate is now disabled by default. If it is disabled (type
`locate` in a terminal window to check) type the following in a terminal window:
	sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist

There are some known issues:

* Auto-complete won't complete subscripted expressions (name[0].) or bound
generic types (List<string> foo; foo.First().).

* Auto-complete will attempt to deduce the type of local variables declared as
var but this only works when the expression is a new expression, an as cast, a
function call like Get<T>(), or a linq query.

* The syntax hiliting isn't quite right when lines are edited. In particular the tab
hiliting is sometimes incorrect for the last line edited.

* Cocoa doesn't handle aliases very well so work needs to be done to support it
ourselves.

* Editing very large files is slower than it should be.

* There is support for saving files using different encodings, but no support for
specifying the encoding when loading (although utf8 and the various forms of utf16
should work fine).

* More work needs to be done to properly support files with non-native line endings.

* The file type (e.g. C#, Shell, Plain Text, etc) is controlled solely by the globs in the
preferences panel which is a bit too inflexible.

jesjones@mindspring.com
