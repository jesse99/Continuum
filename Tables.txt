This file describes the tables used by the object-model databases associated with each
directory editor. The tables are built using a thread which recursively searches the
directory for assemblies, uses Cecil to open them, and updates the table if new information
is found. Information associated with old or missing assemblies is also removed by the
thread.

Note that the table schema is very important: the responsiveness of important UI actions
like auto-complete is driven by how fast we can query the database for the information
we need. We also want to keep the database size as small as possible so that as much
of the tables as possible fits into the sqlite and file-system caches (these sizes can be
very large, for example Continuum.db was 67M with an earlier version of the schema).

Times are in System.DateTime ticks. Field names appended with # are part of the primary 
key. Field names appended with $ are foreign keys. 

Type names are as generated by Cecil and a bit complex. By convention these are categorized
using three groups:

1) root_names are the types in the Types table and the name may include a generic argument 
count (e.g. "System.Int32" or "System.Collections.Dictionary`2"). 

2) special_names are in the SpecialTypes table and are normally arrays, instantiated generics,
or pointers (e.g. "System.Int32[]",  "System.Collections.Dictionary`2<System.Int32, System.
String>", or "System.Int32*").

3) type_names may be root or special names. Note that this name may not be in either
of Types or SpecialTypes if it is a root type declared in an assembly which couldn't be found
(or hasn't been parsed yet).

--------------------------------------
Assemblies
path#			Full path to the assembly.
name			The name of the assembly, eg "mcocoa".
culture			The culture the assembly was compiled against, eg "neutral" or "en-us".
version			The version of the assembly as major.minor.build.revision, eg "0.4.44.0".
write_time		The time at which the assembly was generated.
assembly		Integer identifying the assembly. Will not be zero (but may be reused if
				another assembly is deleted).
in_use			1 if the assembly is in the Types table. 0 if not.

--------------------------------------
Types
root_name#			Full name of the type as generated by Cecil.
assembly$				Assemblies foreign key.
namespace				The namespace the type was declared within, eg "System.Collections"
						or empty if the type is within the global namespace.
name					Completely undecorated type name: does not  include namespace, 
						outer type, or generic argument counts.
base_root_name		Types foreign key or empty if the type has no base (eg if it's 
						"System.Object" or an interface).
interface_root_names	Colon terminated list of the root names of each interface directly 
						implemented by the type. Empty if the type implementes no 
						interfaces.
generic_arg_count		Number of generic arguments for the type.
visibility				0 for public, 1 for family, 2 for internal, and 3 for private.
attributes				Bitmask where if 0x01 is set the type is abstract, 0x02 sealed, 0x04
						an interface, 0x08 a value type, 0x10 an enum, 0x20 nested.

This table will contain only the types for the most recent version of an assembly name
where the version is determined first by the version and, if those are equal, the write
time. If the assembly is deleted then its types are also deleted and those of the next
most recent assembly are added. The methods and Fields tables are also updated in
this way.

Note that it is technically possible for two completely different assemblies to declare
types with the same full names. But this is tough for us to handle because when we
do lookups we have the type's name but don't know which assembly it is in. So, rather
than try to deal with this we simply punt and add only one of the types to our table.

--------------------------------------
SpecialTypes
special_name#$		The full type name generated by Cecil.
element_type_name	Types or SpecialTypes foreign key or empty. For arrays this will
						be the element type, for generic instances the type sans generic
						arguments (i.e. "System.IEquatable`1"), for pointers the type
						being pointed to, and for other empty.
rank					The number of dimensions in the array, or zero if the type is
						not an array.
generic_type_names	Colon terminated list of the type names of the instantiated generic 
						arguments. Empty if the type is not an instantiated generic.
kind					0 for array, 1 for generic instance, 2 for pointer, and 3 for
						other (function pointer, modifier, pinned, reference, sentinel).
kind_name				For arrays this will be "array-type", for generic instances it will be 
						something like "System.IEquatable`1", for pointers "pointer-type", 
						and for other types "other-type".

Note that unlike the other tables the rows in this table are not pruned.
			
--------------------------------------
Methods
display_text#			The exact formatting is undefined except that the method name is
						preceded by "::" and ';' is used to separate the arguments.
name					Undecorated method name.
return_type_name		Types or SpecialTypes foreign key.
declaring_root_name$	Types foreign key. 
params_count			Number of parameters used by the method (not including the 						implicit this).
generic_arg_count		Number of generic arguments for the method.
assembly$				Assemblies foreign key.
extend_type_name		If the method is an extension method then this is the name of the
						type it extends, otherwise it is zero.
access					0 for public, 1 for family, 2 for internal, and 3 for private.
static					1 if the method is static, 0 if not.
file_path				Names foreign key for the full path of the file the method is declared
						within. Zero if the assembly was compiled without debug info.
line						The 1-based line number of the start of the method. May be -1.
kind					0 for normal, 1 for property getter, 2 for property setter, 3 for 
						indexer getter, 4 for indexer setter, 5 for event (add, remove, or  						fire), 6 for constructor, 7 for operator, 8 for extension method, or 
						9 for finalizer.

--------------------------------------
Fields
name#						Name of the field, eg "m_customer".
declaring_root_name#$	Types foreign key. 
type_name					Types or SpecialTypes foreign key.
assembly$					Assemblies foreign key.
access						0 for public, 1 for family, 2 for internal, and 3 for private.
static						1 if the field is static, 0 if not.

